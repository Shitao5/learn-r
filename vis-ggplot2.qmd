# ggplot2

```{r}
#| echo: false

source("common.R")
status("writing")
columns(1, 2/3)
library(ggplot2)
```

<!-- columns函数控制绘图输出，用法如下： -->
<!-- `r columns(1, 2/3)` -->
<!-- `r columns(2, 2/3)` -->
<!-- `r columns(3, 1)` -->
<!-- `r columns(4, 1)` -->

ggplot2[@ggplot2]具有底层的图形语法，[*ggplot2: Elegant Graphics for Data Analysis*](https://ggplot2-book.org/)重点解释了这套语法，
本章节为其学习笔记。

## ggplot2初步

ggplot2具有颜色（color）、大小（size）、形状（shape）、填充（fill）等美学属性，适用于不同类型的图形。

在绘图美学中，少即是多，使用美学映射需要节制。与其用一幅非常复杂的图形一次展示所有，不如创造一些简单的情节，讲述一个故事，让读者的认识从无到有。

## 图层（Layers）

ggplot2的分层结构[^layers]使得我们可以以结构化的方式设计和构建图形。一般来说，图层有三个功能：

[^layers]: 和Photoshop的图层类似。

1. 展示数据
1. 展示数据的统计摘要
1. 添加额外的元数据：背景、注释和参考文献。

### 基本图形

`r columns(4, 1)`
```{r}
#| label: basic-plot
#| layout-ncol: 4
#| layout-nrow: 2

df <- data.frame(
  x = c(3, 1, 5),
  y = c(2, 4, 6),
  label = c("a", "b", "c")
)

p <- ggplot(df, aes(x, y, label = label)) +
  labs(x = NULL, y = NULL) +
  theme(plot.title = element_text(size = 12))

p + geom_point() + ggtitle("point")
p + geom_text() + ggtitle("text")
p + geom_bar(stat = "identity") + ggtitle("bar")
p + geom_tile() + ggtitle("raster")

p + geom_line() + ggtitle("line")
p + geom_area() + ggtitle("area")
p + geom_path() + ggtitle("path")
p + geom_polygon() + ggtitle("polygon")
```

### 揭示不确定性

根据x轴是否连续和是否展示中间值，比较基本的有：

`r columns(3, 1)`
```{r}
#| label: summaries-plot
#| layout-ncol: 3
#| layout-nrow: 2

df <- data.frame(x = 1:3,
                 y = c(18, 11, 16),
                 se = c(1.2, .5, 1.0))

base <- ggplot(df, aes(x, y,
                       ymin = y - se,
                       ymax = y + se))
base + geom_crossbar()
base + geom_pointrange()
base + geom_smooth(stat = "identity")

base + geom_errorbar()
base + geom_linerange()
base + geom_ribbon()
```

### 权重数据

`r columns(2, 2/3)`
```{r}
#| label: weighted-data
#| layout-ncol: 2

# Unweighted
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point()

# Weighted by population
ggplot(midwest, aes(percwhite, percbelowpoverty)) +
  geom_point(aes(size = poptotal / 1e6)) +
  scale_size_area("Population\n(millions)",
                  breaks = c(.5, 1, 2, 4))
```























