# ggplot2-scales {#sec-scales}

```{r}
#| echo: false

source("common.R")
status("writing")
columns(1, 2/3)
```

```{r}
#| message: false
library(ggplot2)
library(dplyr)
```

标度控制数据到美学的映射，它将数据转为大小（size）、颜色（color）、位置（position）或形状（shape），它也提供了解释绘图的工具：坐标轴和图例。

## 位置标度和坐标轴

### 数值型

#### Limits

`lims()`或`limits`参数可用于修改坐标轴范围，需要接受长度为2的数值型向量。如果只设置单侧范围，另一侧设置为`NA`。

`r columns(2)`

```{r}
#| layout-ncol: 2

mpg %>% filter(year == 1999) %>% 
  ggplot(aes(displ, hwy)) +
  geom_point() +
  scale_x_continuous(limits = c(1, 7)) +
  scale_y_continuous(limits = c(10, 45))

mpg %>% filter(year == 2008) %>% 
  ggplot(aes(displ, hwy)) +
  geom_point() +
  lims(x = c(1, 7), y = c(10, 45))
```

#### Zooming in

如果目标是放大绘图的一部分，使用`coord_cartesian()`的`xlim`和`ylim`参数通常会更好。

`r columns(3)`

```{r}
#| layout-ncol: 3

base <- ggplot(mpg, aes(drv, hwy)) +
  geom_hline(yintercept = 28, color = "red") +
  geom_boxplot()

base
base + coord_cartesian(ylim = c(10, 35))
base + ylim(10, 35)
```

#### Visual range expansion

`r columns(2)`

```{r}
#| layout-ncol: 2

base <- ggplot(faithfuld, aes(waiting, eruptions)) +
  geom_raster(aes(fill = density)) +
  theme(legend.position = "none") +
  labs(x = NULL, y = NULL)

base
base + 
  scale_x_continuous(expand = expansion(0)) +
  scale_y_continuous(expand = expansion(0))
```

`r columns(3)`

```{r}
#| layout-ncol: 3

base + 
  scale_x_continuous(expand = expansion(add = 3)) +
  scale_y_continuous(expand = expansion(add = 3))

base +
  scale_x_continuous(expand = expansion(mult = .2)) +
  scale_y_continuous(expand = expansion(mult = .2))

base +
  scale_x_continuous(expand = expansion(mult = c(.05, .2))) +
  scale_y_continuous(expand = c(.05, 0, .2, 0))
```

`add`参数是在与数据变量相同的尺度上指定的，`mult`参数是相对于轴的范围指定的。

#### Breaks

```{r}
toy <- data.frame(
  const = 1,
  up = 1:4,
  txt = letters[1:4],
  big = (1:4) * 1000,
  log = c(2, 5, 10, 2000)
)
toy
```

通过向`breaks`参数传递数值，可手动设置断点。设置`breaks = NULL`移除断点和相关的刻度线。

`r columns(1)`

```{r}
base <- ggplot(toy, aes(big, const)) +
  geom_point() +
  labs(x = NULL, y = NULL) +
  scale_y_continuous(breaks = NULL)
base
```

需注意，手动设置断点会移动主要和次要网格线：

`r columns(2)`

```{r}
#| layout-ncol: 2

base + scale_x_continuous(breaks = c(1000, 2000, 4000))
base + scale_x_continuous(breaks = c(1000, 1500, 2000, 4000))
```

也可以向`breaks`传递函数，该函数应有一个指定标度范围的参数（长度为2的数值型向量），并且返回断点的数值型向量。scales包[@scales]提供了一些有用的工具：

-   `scales::breaks_extended()`为数值轴自动创建断点（ggplot2的标准方法）；
-   `scales::breaks_log()`为对数轴自动创建断点；
-   `scales::breaks_pretty()`为日期/时间创建断点；
-   `scales::breaks_width()`创建等距的断点。

`r columns(3)`

```{r}
#| layout-ncol: 3

base + 
  scale_x_continuous(breaks = scales::breaks_width(800))
base + 
  scale_x_continuous(breaks = scales::breaks_width(800, offset = 200)) # 偏移
base +
  scale_x_continuous(breaks = scales::breaks_width(800, offset = -200))
```

#### Minor breaks

次要断点（主网格线之间未标记的网格线）对于对数轴特别有用，因为它清晰地展示了刻度是非线性的。

```{r}
mb <- unique(as.numeric(1:10 %o% 10 ^ (0:3)))
mb
```

`r columns(2)`

```{r}
#| layout-ncol: 2

base <- ggplot(toy, aes(log, const)) +
  geom_point() +
  labs(x = NULL, y = NULL) +
  scale_y_continuous(breaks = NULL)

base + scale_x_log10()
base + scale_x_log10(minor_breaks = mb)
```

#### Labels

```{r}
#| layout-ncol: 2

base <- ggplot(toy, aes(big, const)) +
  geom_point() +
  labs(x = NULL, y = NULL) +
  scale_y_continuous(breaks = NULL)

base
base + scale_x_continuous(
  breaks = c(2000, 4000),
  labels = c("2k", "4k")
)
```

通常不需要手动设置`labels`参数，和`breaks`参数一样，scales包提供了有效的函数：

-   `scales::label_bytes()`将数字转化为kb、mb等字节格式；
-   `scales::label_comma()`为数字添加逗号；
-   `scales::label_dollar()`将数字转为货币；
-   `scales::label_ordinal()`将数字转为等级顺序；
-   `scales::label_percent()`将数字转为百分数；
-   `scales::label_pvalue()`将数字转为p值。

`r columns(3)`

```{r}
#| layout-ncol: 3

base <- ggplot(toy, aes(big, const)) +
  geom_point() +
  labs(x = NULL, y = NULL) +
  scale_x_continuous(breaks = NULL)

base
base + scale_y_continuous(labels = scales::label_percent())
base + scale_y_continuous(labels = scales::label_dollar(prefix = "", suffix = "€")) # 默认前缀$
```

注意`breaks = NULL`和`labels = NULL`的差别：

`r columns(2)`

```{r}
#| layout-ncol: 2

base + scale_y_continuous(breaks = NULL)
base + scale_y_continuous(labels = NULL)
```

#### Transformations

每一个连续的标度都带有允许使用各种转换的`trans`参数。

```{r}
#| layout-ncol: 2

ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  scale_y_continuous(trans = "reciprocal") # y轴取倒数

# x和y轴取10为底的对数
ggplot(diamonds, aes(price, carat)) +
  geom_bin2d() +
  scale_x_continuous(trans = "log10") +
  scale_y_continuous(trans = "log10")
```

可以使用`scales::trans_new()`构建转换，scales包同样提供了许多常见的转换：

| Name                   | Transformer                  | Function $f(x)$         | Inverse $f^{-1}(x)$
|------------------------|------------------------------|-------------------------|------------------------
| `"asn"`                | `scales::asn_trans()`        | $\tanh^{-1}(x)$         | $\tanh(y)$
| `"exp"`                | `scales::exp_trans()`        | $e ^ x$                 | $\log(y)$
| `"identity"`           | `scales::identity_trans()`   | $x$                     | $y$
| `"log"`                | `scales::log_trans()`        | $\log(x)$               | $e ^ y$
| `"log10"`              | `scales::log10_trans()`      | $\log_{10}(x)$          | $10 ^ y$
| `"log2"`               | `scales::log2_trans()`       | $\log_2(x)$             | $2 ^ y$
| `"logit"`              | `scales::logit_trans()`      | $\log(\frac{x}{1 - x})$ | $\frac{1}{1 + e(y)}$
| `"probit"`             | `scales::probit_trans()`     | $\Phi(x)$               | $\Phi^{-1}(y)$
| `"reciprocal"`         | `scales::reciprocal_trans()` | $x^{-1}$                | $y^{-1}$
| `"reverse"`            | `scales::reverse_trans()`    | $-x$                    | $-y$
| `"sqrt"`               | `scales::scale_x_sqrt()`     | $x^{1/2}$               | $y ^ 2$

当然，也可以手动进行这些转换，绘制的图形外观是一样的，但是刻度标签将有所差异。具体来讲，如果使用转换标度，刻度标签将展示原始的数据空间；如果手动转换数据，刻度标签将展示转换后的数据空间。

```{r}
#| layout-ncol: 2

# 手动转换数据
ggplot(mpg, aes(log10(displ), hwy)) +
  geom_point()

# 转换标度
ggplot(mpg, aes(displ, hwy)) +
  geom_point() +
  scale_x_log10()
```

### 日期-时间型

#### Breaks

`data_breaks`参数允许以日期单位（年、月、星期、日、小时、分、秒）确定断点：

`r columns(2, 2/3)`

```{r}
date_base <- ggplot(economics, aes(date, psavert)) +
  geom_line(na.rm = TRUE) +
  labs(x = NULL, y = NULL)

date_base
date_base + scale_x_date(date_breaks = "15 years")
```

`date_breaks = "15 years"`是`breaks = scales::breaks_width("15 years")`的缩写。如果需要使用偏移，长格式更有用。比如绘制跨越一个日历年的数据，并按月划分：

```{r}
the_year <- as.Date(c("2021-01-01", "2021-12-31"))
set_breaks <- scales::breaks_width("1 month")
set_breaks(the_year)
```

在上面的例子中，`scales::break_width()`返回的`set_breaks()`函数产生了间隔一个月的断点，其中每个断点的日期都在该月的第一天。通常将每个断点放在日历年的开始位置，但也有例外。假如数据追踪的是一个家庭的收入和支出，其中每月的工资是在每个月的第九天支付。在这种情况下，更明智的做法是让断点与工资存款保持一致。要做到这一点，可以在定义`set_breaks()`函数时设置`offset = 8`：

```{r}
set_breaks <- scales::breaks_width("1 month", offset = 8)
set_breaks(the_year)
```

#### Minor breaks

`r columns(2, 4/3)`

```{r}
df <- data.frame(y = as.Date(c("2022-01-01", "2022-04-01")))
base <- ggplot(df, aes(y = y)) +
  labs(y = NULL) +
  theme_minimal() +
  theme(
    panel.grid.major = element_line(color = "black"),
    panel.grid.minor = element_line(color = "grey50")
  )

base + scale_y_date(date_breaks = "1 month")
base + scale_y_date(date_breaks = "1 month", date_minor_breaks = "1 week")
```

#### Labels

日期刻度标签使用`date_labels`参数传递格式化字符串更加便捷。比如，14/10/1979可以使用字符串`"%d%m%y"`展示。字符串列表如下：

| String        | Meaning
|:--------------|:-----------------------------------------
| `%S`          | second (00-59)
| `%M`          | minute (00-59)
| `%l`          | hour, in 12-hour clock (1-12)
| `%I`          | hour, in 12-hour clock (01-12)
| `%p`          | am/pm
| `%H`          | hour, in 24-hour clock (00-23)
| `%a`          | day of week, abbreviated (Mon-Sun)
| `%A`          | day of week, full (Monday-Sunday)
| `%e`          | day of month (1-31)
| `%d`          | day of month (01-31)
| `%m`          | month, numeric (01-12)
| `%b`          | month, abbreviated (Jan-Dec)
| `%B`          | month, full (January-December)
| `%y`          | year, without century (00-99)
| `%Y`          | year, with century (0000-9999)

一个常用场景是：当没有足够的空间来指定四位数的年份时，使用`%y`可以确保只显示最后两位数字。

`r columns(2, 2/3)`

```{r}
base <- ggplot(economics, aes(date, psavert)) +
  geom_line(na.rm = TRUE) +
  labs(x = NULL, y = NULL)

base + scale_x_date(date_breaks = "5 years")
base + scale_x_date(date_breaks = "5 years", date_labels = "%y")
```

格式化字符串中包含换行符（`\n`）在文本较长的情况下可能很有用：

```{r}
lim <- as.Date(c("2004-01-01", "2005-01-01"))

base + scale_x_date(limits = lim, date_labels = "%b %y")
base + scale_x_date(limits = lim, date_labels = "%B\n%Y")
```

scales包提供了方便生成标签的函数，`data_labels`已经调用了`scales::label_date()`。`scales::label_date_short()`需要在`labels`参数中明确调用，该函数自动构建足以唯一识别日期的短标签：

`r columns(1, 2/3)`

```{r}
base +
  scale_x_date(
    limits = lim,
    labels = scales::label_date_short()
  )
```

这通常可以产生更清晰的图表：在上面的例子中，每个年份只被标示一次，而不是出现在每个标签中，减少了视觉上的混乱，使读者更容易看到每个年份的开始和结束。

### 离散型
