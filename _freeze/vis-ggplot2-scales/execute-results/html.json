{
  "hash": "6d2f979cad3c4e666da1c07fb1d101d6",
  "result": {
    "markdown": "# ggplot2-scales {#sec-scales}\n\n\n::: {.cell}\n::: {.cell-output-display}\n::: callout-warning\n## 各位看客：\n*Learn-R* 仍在写作流程中。本章节正在进行写作和结构调整，可能出现混乱或不完整的情况。 \n:::\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-2_1bf8f57b23a17a9dc9b945bc9f14ed94'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n\n标度控制数据到美学的映射，它将数据转为大小（size）、颜色（color）、位置（position）或形状（shape），它也提供了解释绘图的工具：坐标轴和图例。\n\n## 位置标度和坐标轴\n\n### 数值型\n\n#### Limits\n\n`lims()`或`limits`参数可用于修改坐标轴范围，需要接受长度为2的数值型向量。如果只设置单侧范围，另一侧设置为`NA`。\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-3_25b94c2140967cd9c820b8ea39460fd8'}\n\n```{.r .cell-code}\nmpg %>% filter(year == 1999) %>% \n  ggplot(aes(displ, hwy)) +\n  geom_point() +\n  scale_x_continuous(limits = c(1, 7)) +\n  scale_y_continuous(limits = c(10, 45))\n\nmpg %>% filter(year == 2008) %>% \n  ggplot(aes(displ, hwy)) +\n  geom_point() +\n  lims(x = c(1, 7), y = c(10, 45))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Zooming in\n\n如果目标是放大绘图的一部分，使用`coord_cartesian()`的`xlim`和`ylim`参数通常会更好。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-4_7ededd250f8d9893f8b13a2787398908'}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(drv, hwy)) +\n  geom_hline(yintercept = 28, color = \"red\") +\n  geom_boxplot()\n\nbase\nbase + coord_cartesian(ylim = c(10, 35))\nbase + ylim(10, 35)\n#> Warning: Removed 6 rows containing non-finite values (stat_boxplot).\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-4-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-4-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n#### Visual range expansion\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-5_f093e4d5f6e6575f12260f9a3f779406'}\n\n```{.r .cell-code}\nbase <- ggplot(faithfuld, aes(waiting, eruptions)) +\n  geom_raster(aes(fill = density)) +\n  theme(legend.position = \"none\") +\n  labs(x = NULL, y = NULL)\n\nbase\nbase + \n  scale_x_continuous(expand = expansion(0)) +\n  scale_y_continuous(expand = expansion(0))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-5-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-6_d31821317496bcc3e219e3b04be61536'}\n\n```{.r .cell-code}\nbase + \n  scale_x_continuous(expand = expansion(add = 3)) +\n  scale_y_continuous(expand = expansion(add = 3))\n\nbase +\n  scale_x_continuous(expand = expansion(mult = .2)) +\n  scale_y_continuous(expand = expansion(mult = .2))\n\nbase +\n  scale_x_continuous(expand = expansion(mult = c(.05, .2))) +\n  scale_y_continuous(expand = c(.05, 0, .2, 0))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-6-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-6-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n`add`参数是在与数据变量相同的尺度上指定的，`mult`参数是相对于轴的范围指定的。\n\n#### Breaks\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-7_1b3de8023ed944e213919af73042c5bb'}\n\n```{.r .cell-code}\ntoy <- data.frame(\n  const = 1,\n  up = 1:4,\n  txt = letters[1:4],\n  big = (1:4) * 1000,\n  log = c(2, 5, 10, 2000)\n)\ntoy\n#>   const up txt  big  log\n#> 1     1  1   a 1000    2\n#> 2     1  2   b 2000    5\n#> 3     1  3   c 3000   10\n#> 4     1  4   d 4000 2000\n```\n:::\n\n\n通过向`breaks`参数传递数值，可手动设置断点。设置`breaks = NULL`移除断点和相关的刻度线。\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-8_38ffbe28180fb3491c5c9660ce881543'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(big, const)) +\n  geom_point() +\n  labs(x = NULL, y = NULL) +\n  scale_y_continuous(breaks = NULL)\nbase\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=70% style='max-width: 4.2in'}\n:::\n:::\n\n\n需注意，手动设置断点会移动主要和次要网格线：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-9_794527087bb8bdc1ac9f247e1f3d34c3'}\n\n```{.r .cell-code}\nbase + scale_x_continuous(breaks = c(1000, 2000, 4000))\nbase + scale_x_continuous(breaks = c(1000, 1500, 2000, 4000))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-9-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n也可以向`breaks`传递函数，该函数应有一个指定标度范围的参数（长度为2的数值型向量），并且返回断点的数值型向量。scales包[@scales]提供了一些有用的工具：\n\n-   `scales::breaks_extended()`为数值轴自动创建断点（ggplot2的标准方法）；\n-   `scales::breaks_log()`为对数轴自动创建断点；\n-   `scales::breaks_pretty()`为日期/时间创建断点；\n-   `scales::breaks_width()`创建等距的断点。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-10_68f2f38d15d9d5d0c643b7af28c01ba3'}\n\n```{.r .cell-code}\nbase + \n  scale_x_continuous(breaks = scales::breaks_width(800))\nbase + \n  scale_x_continuous(breaks = scales::breaks_width(800, offset = 200)) # 偏移\nbase +\n  scale_x_continuous(breaks = scales::breaks_width(800, offset = -200))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-10-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-10-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n#### Minor breaks\n\n次要断点（主网格线之间未标记的网格线）对于对数轴特别有用，因为它清晰地展示了刻度是非线性的。\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-11_53bfa019792676f1bd0396b832446b6e'}\n\n```{.r .cell-code}\nmb <- unique(as.numeric(1:10 %o% 10 ^ (0:3)))\nmb\n#>  [1]     1     2     3     4     5     6     7     8     9    10\n#> [11]    20    30    40    50    60    70    80    90   100   200\n#> [21]   300   400   500   600   700   800   900  1000  2000  3000\n#> [31]  4000  5000  6000  7000  8000  9000 10000\n```\n:::\n\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-12_0c03639e82cdd0a6e54b1bc369eaba8c'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(log, const)) +\n  geom_point() +\n  labs(x = NULL, y = NULL) +\n  scale_y_continuous(breaks = NULL)\n\nbase + scale_x_log10()\nbase + scale_x_log10(minor_breaks = mb)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-12-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Labels\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-13_7cba9b15c23f26a734328ca9c5034840'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(big, const)) +\n  geom_point() +\n  labs(x = NULL, y = NULL) +\n  scale_y_continuous(breaks = NULL)\n\nbase\nbase + scale_x_continuous(\n  breaks = c(2000, 4000),\n  labels = c(\"2k\", \"4k\")\n)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-13-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n通常不需要手动设置`labels`参数，和`breaks`参数一样，scales包提供了有效的函数：\n\n-   `scales::label_bytes()`将数字转化为kb、mb等字节格式；\n-   `scales::label_comma()`为数字添加逗号；\n-   `scales::label_dollar()`将数字转为货币；\n-   `scales::label_ordinal()`将数字转为等级顺序；\n-   `scales::label_percent()`将数字转为百分数；\n-   `scales::label_pvalue()`将数字转为p值。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-14_da39618eab97b9e4183e743a46d7ed35'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(big, const)) +\n  geom_point() +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(breaks = NULL)\n\nbase\nbase + scale_y_continuous(labels = scales::label_percent())\nbase + scale_y_continuous(labels = scales::label_dollar(prefix = \"\", suffix = \"€\")) # 默认前缀$\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-14-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-14-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n注意`breaks = NULL`和`labels = NULL`的差别：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-15_a51b2a21ebf267fd87316825f7ee0486'}\n\n```{.r .cell-code}\nbase + scale_y_continuous(breaks = NULL)\nbase + scale_y_continuous(labels = NULL)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-15-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Transformations\n\n每一个连续的标度都带有允许使用各种转换的`trans`参数。\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-16_da6813b2a4339bf8785b27640ae91269'}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  scale_y_continuous(trans = \"reciprocal\") # y轴取倒数\n\n# x和y轴取10为底的对数\nggplot(diamonds, aes(price, carat)) +\n  geom_bin2d() +\n  scale_x_continuous(trans = \"log10\") +\n  scale_y_continuous(trans = \"log10\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-16-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n可以使用`scales::trans_new()`构建转换，scales包同样提供了许多常见的转换：\n\n| Name           | Transformer                  | Function $f(x)$         | Inverse $f^{-1}(x)$  |\n|------------------|-------------------|------------------|------------------|\n| `\"asn\"`        | `scales::asn_trans()`        | $\\tanh^{-1}(x)$         | $\\tanh(y)$           |\n| `\"exp\"`        | `scales::exp_trans()`        | $e ^ x$                 | $\\log(y)$            |\n| `\"identity\"`   | `scales::identity_trans()`   | $x$                     | $y$                  |\n| `\"log\"`        | `scales::log_trans()`        | $\\log(x)$               | $e ^ y$              |\n| `\"log10\"`      | `scales::log10_trans()`      | $\\log_{10}(x)$          | $10 ^ y$             |\n| `\"log2\"`       | `scales::log2_trans()`       | $\\log_2(x)$             | $2 ^ y$              |\n| `\"logit\"`      | `scales::logit_trans()`      | $\\log(\\frac{x}{1 - x})$ | $\\frac{1}{1 + e(y)}$ |\n| `\"probit\"`     | `scales::probit_trans()`     | $\\Phi(x)$               | $\\Phi^{-1}(y)$       |\n| `\"reciprocal\"` | `scales::reciprocal_trans()` | $x^{-1}$                | $y^{-1}$             |\n| `\"reverse\"`    | `scales::reverse_trans()`    | $-x$                    | $-y$                 |\n| `\"sqrt\"`       | `scales::scale_x_sqrt()`     | $x^{1/2}$               | $y ^ 2$              |\n\n当然，也可以手动进行这些转换，绘制的图形外观是一样的，但是刻度标签将有所差异。具体来讲，如果使用转换标度，刻度标签将展示原始的数据空间；如果手动转换数据，刻度标签将展示转换后的数据空间。\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-17_154b5a562116d75af0a703b6e61161e8'}\n\n```{.r .cell-code}\n# 手动转换数据\nggplot(mpg, aes(log10(displ), hwy)) +\n  geom_point()\n\n# 转换标度\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-17-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n### 日期-时间型\n\n#### Breaks\n\n`data_breaks`参数允许以日期单位（年、月、星期、日、小时、分、秒）确定断点：\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-18_7ceeed5a19cfe147c14d5cdd64b0b603'}\n\n```{.r .cell-code}\ndate_base <- ggplot(economics, aes(date, psavert)) +\n  geom_line(na.rm = TRUE) +\n  labs(x = NULL, y = NULL)\n\ndate_base\ndate_base + scale_x_date(date_breaks = \"15 years\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-18-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n`date_breaks = \"15 years\"`是`breaks = scales::breaks_width(\"15 years\")`的缩写。如果需要使用偏移，长格式更有用。比如绘制跨越一个日历年的数据，并按月划分：\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-19_fd8c40d2d41870fdcf8992fba9ec3e67'}\n\n```{.r .cell-code}\nthe_year <- as.Date(c(\"2021-01-01\", \"2021-12-31\"))\nset_breaks <- scales::breaks_width(\"1 month\")\nset_breaks(the_year)\n#>  [1] \"2021-01-01\" \"2021-02-01\" \"2021-03-01\" \"2021-04-01\"\n#>  [5] \"2021-05-01\" \"2021-06-01\" \"2021-07-01\" \"2021-08-01\"\n#>  [9] \"2021-09-01\" \"2021-10-01\" \"2021-11-01\" \"2021-12-01\"\n#> [13] \"2022-01-01\"\n```\n:::\n\n\n在上面的例子中，`scales::break_width()`返回的`set_breaks()`函数产生了间隔一个月的断点，其中每个断点的日期都在该月的第一天。通常将每个断点放在日历年的开始位置，但也有例外。假如数据追踪的是一个家庭的收入和支出，其中每月的工资是在每个月的第九天支付。在这种情况下，更明智的做法是让断点与工资存款保持一致。要做到这一点，可以在定义`set_breaks()`函数时设置`offset = 8`：\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-20_900f32d89290d2c20b82c9a67975d9e1'}\n\n```{.r .cell-code}\nset_breaks <- scales::breaks_width(\"1 month\", offset = 8)\nset_breaks(the_year)\n#>  [1] \"2021-01-09\" \"2021-02-09\" \"2021-03-09\" \"2021-04-09\"\n#>  [5] \"2021-05-09\" \"2021-06-09\" \"2021-07-09\" \"2021-08-09\"\n#>  [9] \"2021-09-09\" \"2021-10-09\" \"2021-11-09\" \"2021-12-09\"\n#> [13] \"2022-01-09\"\n```\n:::\n\n\n#### Minor breaks\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-21_4eb2a42088a29bf0818ca6a318fda516'}\n\n```{.r .cell-code}\ndf <- data.frame(y = as.Date(c(\"2022-01-01\", \"2022-04-01\")))\nbase <- ggplot(df, aes(y = y)) +\n  labs(y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_line(color = \"black\"),\n    panel.grid.minor = element_line(color = \"grey50\")\n  )\n\nbase + scale_y_date(date_breaks = \"1 month\")\nbase + scale_y_date(date_breaks = \"1 month\", date_minor_breaks = \"1 week\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-21-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Labels\n\n日期刻度标签使用`date_labels`参数传递格式化字符串更加便捷。比如，14/10/1979可以使用字符串`\"%d%m%y\"`展示。字符串列表如下：\n\n| String | Meaning                            |\n|:-------|:-----------------------------------|\n| `%S`   | second (00-59)                     |\n| `%M`   | minute (00-59)                     |\n| `%l`   | hour, in 12-hour clock (1-12)      |\n| `%I`   | hour, in 12-hour clock (01-12)     |\n| `%p`   | am/pm                              |\n| `%H`   | hour, in 24-hour clock (00-23)     |\n| `%a`   | day of week, abbreviated (Mon-Sun) |\n| `%A`   | day of week, full (Monday-Sunday)  |\n| `%e`   | day of month (1-31)                |\n| `%d`   | day of month (01-31)               |\n| `%m`   | month, numeric (01-12)             |\n| `%b`   | month, abbreviated (Jan-Dec)       |\n| `%B`   | month, full (January-December)     |\n| `%y`   | year, without century (00-99)      |\n| `%Y`   | year, with century (0000-9999)     |\n\n一个常用场景是：当没有足够的空间来指定四位数的年份时，使用`%y`可以确保只显示最后两位数字。\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-22_7e9af773e3cf3b766c1bf05bddf3afe0'}\n\n```{.r .cell-code}\nbase <- ggplot(economics, aes(date, psavert)) +\n  geom_line(na.rm = TRUE) +\n  labs(x = NULL, y = NULL)\n\nbase + scale_x_date(date_breaks = \"5 years\")\nbase + scale_x_date(date_breaks = \"5 years\", date_labels = \"%y\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-22-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n格式化字符串中包含换行符（`\\n`）在文本较长的情况下可能很有用：\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-23_04a1272c6bbbf85b157d06061daa9ac8'}\n\n```{.r .cell-code}\nlim <- as.Date(c(\"2004-01-01\", \"2005-01-01\"))\n\nbase + scale_x_date(limits = lim, date_labels = \"%b %y\")\nbase + scale_x_date(limits = lim, date_labels = \"%B\\n%Y\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-23-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\nscales包提供了方便生成标签的函数，`data_labels`已经调用了`scales::label_date()`。`scales::label_date_short()`需要在`labels`参数中明确调用，该函数自动构建足以唯一识别日期的短标签：\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-24_9f738b00c5e5a7e41e6e98a6359af5ad'}\n\n```{.r .cell-code}\nbase +\n  scale_x_date(\n    limits = lim,\n    labels = scales::label_date_short()\n  )\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=70% style='max-width: 4.2in'}\n:::\n:::\n\n\n这通常可以产生更清晰的图表：在上面的例子中，每个年份只被标示一次，而不是出现在每个标签中，减少了视觉上的混乱，使读者更容易看到每个年份的开始和结束。\n\n### 离散型\n\n在内部，ggplot2将每个离散标度映射到整数值，然后在相应的坐标位置进行绘制。\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-25_0b119dcb85f32b29ff3c99cceebb6ac6'}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy, class)) +\n  geom_point() +\n  annotate(\"text\", x = 5, y = 1:7, label = 1:7)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=70% style='max-width: 4.2in'}\n:::\n:::\n\n\n分类变量映射到整数值意味着其他宽度量可以被指定为分类范围的比例，在上面的例子中，我们可以指定在一半高度内的垂直抖动：\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-26_72d6001cb73d34b81eb9d77812f4c289'}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy, class)) +\n  geom_jitter(width = 0, height = .25) +\n  annotate(\"text\", x = 5, y = 1:7, label = 1:7)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=70% style='max-width: 4.2in'}\n:::\n:::\n\n\n同样的机制也应用于柱状图、箱型图的宽度：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-27_78482529e696817fe755f1d76a594184'}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_boxplot()\nggplot(mpg, aes(drv, hwy)) + geom_boxplot(width = .4)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-27-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Limits, breaks, and labels\n\n尽管存在一些不同，大多数情况下，这些参数与数值型标度一致。比如离散型的`limits`不是通过端点来确定的，取而代之的是变量的一组允许的值。因此，离散值的`limits`应该是一个字符串向量，并按照它们出现的顺序绘制所有可能的值。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-28_692900f670d3fdda36593f710d29afc9'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(const, txt)) +\n  geom_label(aes(label = txt)) +\n  scale_x_continuous(breaks = NULL) +\n  labs(x = NULL, y = NULL)\n\nbase\nbase + scale_y_discrete(limits = letters[1:5])\nbase + scale_y_discrete(limits = c(\"d\", \"c\", \"a\", \"b\"))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-28-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-28-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n`breaks`参数基本没有变化，主要用于列举一组要现实在坐标轴标签上的值。`labels`参数多了一些额外的功能：可以选择使用命名向量设置特定的标签：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-29_1eeb2204ba0cacb4c70d07e3ac8983d1'}\n\n```{.r .cell-code}\nbase + scale_y_discrete(breaks = c(\"b\", \"c\"))\nbase + scale_y_discrete(labels = c(c = \"carrot\", b = \"banana\"))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-29-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n与其他标度一样，离散位置标度允许向`labels`参数传递函数。`scales::label_wrap()`函数可以将长标签分割为多行。\n\n#### Label positions\n\n在绘制分类数据时，经常需要以某种方式移动轴的标签，防止它们重叠。\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-30_b3bcd8ef4da310ca1c967bd4c8cfbaf0'}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(manufacturer, hwy)) + geom_boxplot()\nbase\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=70% style='max-width: 4.2in'}\n:::\n:::\n\n\n即使分配了大量的水平空间，轴的标签也会有相当程度的重叠。我们可以利用`guides()`函数进行控制，它的工作方式与 @sec-labs 中的labs()函数类似。两者都以不同美学的名称（如color、x、fill）为参数，并允许指定想要的值。对于位置美学，我们使用guide_axis()来告诉ggplot2我们想如何修改轴的标签。例如，我们可以设置guide_axis(n.dodge`= 3)`来告诉ggplot2躲避标签的位置，或者设置`guide_axis(rotate = 90)`来旋转它们。\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-31_8f7e5ca240a971264681b2ed8130fbff'}\n\n```{.r .cell-code}\nbase + guides(x = guide_axis(n.dodge = 3))\nbase + guides(x = guide_axis(angle = 90))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-31-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n与`labs()`是将`name`参数指定到一个或多个尺度的快捷方式一样，`guides()`函数也将`guide`参数指定为一个或多个尺度的快捷方式。下面的代码可以实现同样的结果：\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-32_cffb3fd02c8258dbd2dc0ea107d6def3'}\n\n```{.r .cell-code}\nbase + scale_x_discrete(guide = guide_axis(n.dodge = 3))\nbase + scale_x_discrete(guide = guide_axis(angle = 90))\n```\n:::\n\n\n### Binned position scales\n\n离散位置标度的一个变种是分档标度，即把一个连续变量切成多个分档并绘制离散变量。下面的例子显示了如何使用`geom_bar()`与分档位置标度相结合来接近`geom_histogram()`的行为。\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-33_0ca5f2710252612571927a937466e6a3'}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy)) + geom_histogram(bins = 8)\nggplot(mpg, aes(hwy)) + geom_bar() + scale_x_binned()\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-33-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n将该技术拓展，假设我们想用`geom_count()`来代替`geom_point()`，以展示每个位置的观测值的数量。`geom_count()`的优点是每个点的大小与每个位置的观测值的数量成比例，但是当数据连续变化时，效果并不理想。为此可以使用`scale_x_binned()`在数值传递给图形前将其分割。\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-34_1a3f731339cd2b9c0e2ba606d2fc514f'}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(displ, hwy)) +\n  geom_count()\n\nbase\nbase + \n  scale_x_binned(n.breaks = 15) +\n  scale_y_binned(n.breaks = 15)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-34-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n## 颜色标签与图例\n\n### 连续颜色标度\n\n本节中使用的`scale_fill_*()`，都有一个对应的`scale_color_*()`与之对应。\n\n\n\n\n::: {.cell layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-35_d25752fd68dc0929fd5eb27fd9da9630'}\n\n```{.r .cell-code}\nerupt <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  scale_x_continuous(NULL, expand = c(0, 0)) + \n  scale_y_continuous(NULL, expand = c(0, 0)) + \n  theme(legend.position = \"none\")\n```\n:::\n\n\n#### 调色板\n\nviridis标度的设计在颜色和被还原为黑白时都是统一的，并且对有各种形式的色盲的人来说都是可以感知的。\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-36_746de448d33d0f6f951ebe3b336ebe6e'}\n\n```{.r .cell-code}\nerupt\nerupt + scale_fill_viridis_c()\nerupt + scale_fill_viridis_c(option = \"magma\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-36-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-36-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n大多数情况下，viridis标度会比ggplot2中内置的其他连续标度效果更好，但在某些情况下，还有其他选项也很有用。ggplot2内置的第二组连续颜色标度是由ColorBrewer标度派生出来的：`scale_fill_brewer()`将这些颜色作为离散调色板提供，而`scale_fill_distiller()`和`scale_fill_fermenter()`是连续和分档的类似物。\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-37_ffc24f2659f08bf141c924e0a3ade575'}\n\n```{.r .cell-code}\nerupt + scale_fill_distiller()\nerupt + scale_fill_distiller(palette = \"RdPu\")\nerupt + scale_fill_distiller(palette = \"YlOrBr\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-37-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-37-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n还有许多其他软件包提供了有用的调色板。例如，scico包[@scico]提供了更多知觉上统一，适合于科学可视化的调色板：\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-38_bad51e44bd00e82168cde3337cfcd0e0'}\n\n```{.r .cell-code}\nerupt + scico::scale_fill_scico(palette = \"bilbao\") # 默认\nerupt + scico::scale_fill_scico(palette = \"vik\")\nerupt + scico::scale_fill_scico(palette = \"lajolla\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-38-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-38-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n由于R中存在大量的调色板包，提供一个通用的接口的paletteer包[@paletteer]特别有用:\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-39_7a67ac0dd4584f1bf3bebcb0f5caaed1'}\n\n```{.r .cell-code}\nerupt + paletteer::scale_fill_paletteer_c(\"viridis::plasma\")\nerupt + paletteer::scale_fill_paletteer_c(\"scico::tokyo\")\nerupt + paletteer::scale_fill_paletteer_c(\"gameofthrones::targaryen\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-39-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-39-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n#### Robust recipes\n\n`scale_fill_continuous()`默认使用了`scale_fill_gradient()`。梯度标度使用了插值：\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-40_00dd38119a0531e96d950923b6461acb'}\n\n```{.r .cell-code}\nerupt + scale_fill_gradient(low = \"grey\", high = \"brown\")\nerupt + \n  scale_fill_gradient2(\n    low = \"grey\",\n    mid = \"white\",\n    high = \"brown\",\n    midpoint = .02\n  )\nerupt + scale_fill_gradientn(colors = terrain.colors(7))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-40-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-40-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n创造好的调色板需要谨慎。一般来说，对于一个两点式的渐变色标，你想传达d 是数值是按顺序排列的，所以你想保持色相不变，而改变色度和亮度。Munsell颜色系统提供了基于色相、色度和亮度的简单方法来指定颜色，在这方面很有用。munsell包[@munsell]提供了对Munsell颜色的简单访问，然后可以用它来指定一个渐变色标：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-41_163b576b8131d2d2a07454420a770cd3'}\n\n```{.r .cell-code}\nmunsell::hue_slice(\"5P\") +\n  annotate(geom = \"segment\", \n           x = c(7, 7), y = c(1, 10),\n           xend = c(7, 7), yend = c(2, 9),\n           arrow = arrow(length = unit(2, \"mm\"))\n           )\n#> Warning: Removed 31 rows containing missing values (geom_text).\n\n# 组成标度\nerupt + scale_fill_gradient(\n  low = munsell::mnsl(\"5P 2/12\"),\n  high = munsell::mnsl(\"5P 7/12\")\n)\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-41-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-41-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### 缺失值\n\n连续色标利用`na.value`参数控制缺失值（包括超出色标限制范围的值）的颜色。默认情况为灰色，当使用彩色比例尺时，它会很突出。可以设置`na.value = NA`使缺失的数值不可见；或者选择一个特定的颜色。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-42_f45fc748f104429ff8697e3294db23e1'}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1, y = 1:5, z = c(1, 3, 2, NA, 5))\n\nbase <- ggplot(df, aes(x, y )) +\n  geom_tile(aes(fill = z), size = 5) +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(labels = NULL)\n\nbase\nbase + scale_fill_gradient(na.value = NA)\nbase + scale_fill_gradient(na.value = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-42-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-42-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-42-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n#### Limits, breaks, and labels\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-43_ff3c1b8e247e94ec292a0f8fa54df183'}\n\n```{.r .cell-code}\nbase <- ggplot(toy, aes(up, up, fill = big)) +\n  geom_tile() +\n  labs(x = NULL, y = NULL)\n\nbase\nbase + scale_fill_continuous(limits = c(0, 10000))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-43-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-43-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-44_9c1f632983fc740a12a0556c86ec8551'}\n\n```{.r .cell-code}\nbase + scale_fill_continuous(breaks = c(1000, 2000, 4000))\nbase + scale_fill_continuous(labels = scales::label_dollar())\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-44-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-44-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n\n\n#### Legends\n\n每个刻度都与一个指南（guide）关联，以显示美学和数据之间的关系。对于位置标尺，轴起到了这个作用；对于彩色刻度，这个作用由图例来扮演，图例可以在指南功能的帮助下进行定制。对于连续色标，默认图例采用“色条”的形式，显示连续的颜色梯度。\n\n图例的外观可以用`guide_colourbar()`来控制。这个函数有许多参数，允许对图例进行精准控制。最重要的参数说明如下:\n\n- `reverse`：反向翻转色条，将最小值放在顶部。\n- `barwidth`和`barheight`指定色条的大小。使用网格单位，例如`unit(1, \"cm\")`。\n- `direction`指定guide的方向，`\"horizontal\"`或者`\"vertical\"`。\n\n\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-45_0a7b8fecf79ad7602f49faa9333bea2f'}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(cyl, displ, color = hwy)) +\n  geom_point(size = 2)\n\nbase + guides(color = guide_colorbar(reverse = TRUE))\nbase + guides(color = guide_colorbar(barheight = unit(2, \"cm\")))\nbase + guides(color = guide_colorbar(direction = \"horizontal\"))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-45-1.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-45-2.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-45-3.png){fig-align='center' width=33.3% style='max-width: 2in'}\n:::\n:::\n\n\n下面两种写法的结果是一样的：\n\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" hash='vis-ggplot2-scales_cache/html/unnamed-chunk-46_3b29ff3200d51ba7277c687b090fa71b'}\n\n```{.r .cell-code}\nbase + guides(color = guide_colorbar(reverse = TRUE))\nbase + scale_color_continuous(guide = guide_colorbar(reverse = TRUE))\n```\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-46-1.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n\n::: {.cell-output-display}\n![](vis-ggplot2-scales_files/figure-html/unnamed-chunk-46-2.png){fig-align='center' width=50% style='max-width: 3in'}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}